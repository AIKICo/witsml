<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataObjectTypeNotSupported" xml:space="preserve">
    <value>In WMLS_AddToStore, the objectType being added in WMLtypeIn must be an objectType supported by the server. The server does not support the object type trying to be added.</value>
    <comment>-487</comment>
  </data>
  <data name="DataObjectTypesDontMatch" xml:space="preserve">
    <value>In WMLS_AddToStore, the WMLtypeIn objectType must match the XMLin objectType. Currently, they do not match.</value>
    <comment>-486</comment>
  </data>
  <data name="DataObjectUidAlreadyExists" xml:space="preserve">
    <value>For WMLS_AddToStore, a data-object with the same type and unique identifier(s) must NOT already exist in the persistent store</value>
    <comment>-405</comment>
  </data>
  <data name="DataVersionNotSupported" xml:space="preserve">
    <value>For WMLS_GetCap, the OptionsIn keyword ‘dataVersion’ must specify a Data Schema Version that is supported by the server as defined by WMLS_GetVersion.</value>
    <comment>-423</comment>
  </data>
  <data name="ErrorAddingToDataStore" xml:space="preserve">
    <value>Error adding to data store</value>
    <comment>-1001</comment>
  </data>
  <data name="ErrorDeletingFromDataStore" xml:space="preserve">
    <value>Error deleting from data store</value>
    <comment>-1004</comment>
  </data>
  <data name="ErrorReadingFromDataStore" xml:space="preserve">
    <value>Error reading from data store</value>
    <comment>-1002</comment>
  </data>
  <data name="ErrorUpdatingInDataStore" xml:space="preserve">
    <value>Error updating in data store</value>
    <comment>-1003</comment>
  </data>
  <data name="InvalidKeywordValue" xml:space="preserve">
    <value>The value specified with an OptionsIn keyword must be a recognized value for that keyword.</value>
    <comment>-441</comment>
  </data>
  <data name="KeywordNotSupportedByFunction" xml:space="preserve">
    <value>The OptionsIn value must be a recognized keyword for that function.</value>
    <comment>-440</comment>
  </data>
  <data name="KeywordNotSupportedByServer" xml:space="preserve">
    <value>A client must not specify an OptionsIn keyword that is not supported by the server.</value>
    <comment>-442</comment>
  </data>
  <data name="MissingDataVersion" xml:space="preserve">
    <value>For WMLS_GetCap, the OptionsIn keyword ‘dataVersion’ must be specified.</value>
    <comment>-424</comment>
  </data>
  <data name="MissingInputTemplate" xml:space="preserve">
    <value>A non-empty value must be defined for the input template.</value>
    <comment>-408</comment>
  </data>
  <data name="MissingParentDataObject" xml:space="preserve">
    <value>Parent does not exist</value>
    <comment>-481</comment>
  </data>
  <data name="MissingPluralRootElement" xml:space="preserve">
    <value>The input template MUST contain a plural root element.</value>
    <comment>-401</comment>
  </data>
  <data name="MissingWMLtypeIn" xml:space="preserve">
    <value>A non-empty value must be defined for WMLtypeIn.</value>
    <comment>-407</comment>
  </data>
  <data name="ParametersNotEncodedByRules" xml:space="preserve">
    <value>The OptionsIn parameter string must be encoded utilizing a subset (semicolon separators and no
 whitespace) of the encoding rules for HTML form content type application/x-www-form-urlencoded.</value>
    <comment>-411</comment>
  </data>
  <data name="ParialSuccess" xml:space="preserve">
    <value>Partial success: Function completed successfully but some growing data-object data-nodes were not returned.</value>
    <comment>2</comment>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Function completed successfully</value>
    <comment>1</comment>
  </data>
</root>