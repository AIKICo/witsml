<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CapabilitiesInNonConforming" xml:space="preserve">
    <value>The CapabilitiesIn XML MUST conform to the API capClient schema.</value>
    <comment>-466</comment>
  </data>
  <data name="DataObjectTypeNotSupported" xml:space="preserve">
    <value>In WMLS_AddToStore, the objectType being added in WMLtypeIn must be an objectType supported by the server. The server does not support the object type trying to be added.</value>
    <comment>-487</comment>
  </data>
  <data name="DataObjectTypesDontMatch" xml:space="preserve">
    <value>In WMLS_AddToStore, the WMLtypeIn objectType must match the XMLin objectType. Currently, they do not match.</value>
    <comment>-486</comment>
  </data>
  <data name="DataObjectUidAlreadyExists" xml:space="preserve">
    <value>For WMLS_AddToStore, a data-object with the same type and unique identifier(s) must NOT already exist in the persistent store</value>
    <comment>-405</comment>
  </data>
  <data name="DataVersionNotSupported" xml:space="preserve">
    <value>For WMLS_GetCap, the OptionsIn keyword ‘dataVersion’ must specify a Data Schema Version that is supported by the server as defined by WMLS_GetVersion.</value>
    <comment>-423</comment>
  </data>
  <data name="ErrorAddingToDataStore" xml:space="preserve">
    <value>Error adding to data store</value>
    <comment>-1001</comment>
  </data>
  <data name="ErrorDeletingFromDataStore" xml:space="preserve">
    <value>Error deleting from data store</value>
    <comment>-1004</comment>
  </data>
  <data name="ErrorReadingFromDataStore" xml:space="preserve">
    <value>Error reading from data store</value>
    <comment>-1002</comment>
  </data>
  <data name="ErrorUpdatingInDataStore" xml:space="preserve">
    <value>Error updating in data store</value>
    <comment>-1003</comment>
  </data>
  <data name="MissingClientUserAgent" xml:space="preserve">
    <value>The client product name and/or product version number are missing in the HTTP user-agent field.</value>
    <comment>-472</comment>
  </data>
  <data name="InvalidKeywordValue" xml:space="preserve">
    <value>The value specified with an OptionsIn keyword must be a recognized value for that keyword.</value>
    <comment>-441</comment>
  </data>
  <data name="KeywordNotSupportedByFunction" xml:space="preserve">
    <value>The OptionsIn value must be a recognized keyword for that function.</value>
    <comment>-440</comment>
  </data>
  <data name="KeywordNotSupportedByServer" xml:space="preserve">
    <value>A client must not specify an OptionsIn keyword that is not supported by the server.</value>
    <comment>-442</comment>
  </data>
  <data name="IncorrectCaseParentUid" xml:space="preserve">
    <value>Incorrect case on parent uid.</value>
    <comment>-478</comment>
  </data>
  <data name="InputTemplateMultipleDataObjects" xml:space="preserve">
    <value>The input template must not specify more than one data-object.</value>
    <comment>-444</comment>
  </data>
  <data name="InputTemplateNonConforming" xml:space="preserve">
    <value>The input template must conform to the appropriate derived schema.</value>
    <comment>-409</comment>
  </data>
  <data name="MissingDataVersion" xml:space="preserve">
    <value>For WMLS_GetCap, the OptionsIn keyword ‘dataVersion’ must be specified.</value>
    <comment>-424</comment>
  </data>
  <data name="MissingInputTemplate" xml:space="preserve">
    <value>A non-empty value must be defined for the input template.</value>
    <comment>-408</comment>
  </data>
  <data name="MissingParentDataObject" xml:space="preserve">
    <value>Parent does not exist</value>
    <comment>-481</comment>
  </data>
  <data name="MissingPluralRootElement" xml:space="preserve">
    <value>The input template MUST contain a plural root element.</value>
    <comment>-401</comment>
  </data>
  <data name="MissingUnitForMeasureData" xml:space="preserve">
    <value>For WMLS_AddToStore and WMLS_UpdateInStore, the client must always specify the unit for all measure data.</value>
    <comment>-453</comment>
  </data>
  <data name="MissingVersionAttribute" xml:space="preserve">
    <value>A QueryIn template must include a version attribute in the plural data-object that defines the Data Schema Version of the data-object.</value>
    <comment>-468</comment>
  </data>
  <data name="MissingWMLtypeIn" xml:space="preserve">
    <value>A non-empty value must be defined for WMLtypeIn.</value>
    <comment>-407</comment>
  </data>
  <data name="ParametersNotEncodedByRules" xml:space="preserve">
    <value>The OptionsIn parameter string must be encoded utilizing a subset (semicolon separators and no
 whitespace) of the encoding rules for HTML form content type application/x-www-form-urlencoded.</value>
    <comment>-411</comment>
  </data>
  <data name="ParialSuccess" xml:space="preserve">
    <value>Partial success: Function completed successfully but some growing data-object data-nodes were not returned.</value>
    <comment>2</comment>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Function completed successfully</value>
    <comment>1</comment>
  </data>
  <data name="MissingDataSchemaVersion" xml:space="preserve">
    <value>A QueryIn template must include a version attribute in the plural data-object that defines the Data Schema Version of the data-object.</value>
    <comment>-468</comment>
  </data>
  <data name="ApiVersionNotSupported" xml:space="preserve">
    <value>The server does not support the API Version provided by the client.</value>
    <comment>-467</comment>
  </data>
  <data name="InvalidClientSchemaVersion" xml:space="preserve">
    <value>In the value of the capClient schemaVersion, the oldest Data Schema Version must be listed first, followed by the next oldest, etc.</value>
    <comment>-404</comment>
  </data>
  <data name="InvalidMaxReturnNodes" xml:space="preserve">
    <value>The value of the OptionsIn keyword of ‘maxReturnNodes’ MUST be greater than zero.</value>
    <comment>-402</comment>
  </data>
  <data name="MissingDefaultWitsmlNamespace" xml:space="preserve">
    <value>A template must include a default namespace declaration for the WITSML namespace.</value>
    <comment>-403</comment>
  </data>
  <data name="MissingParentUid" xml:space="preserve">
    <value>For WMLS_AddToStore, all parentage-pointers and lower level(child) uid values must be defined in the XMLin file.</value>
    <comment>-406</comment>
  </data>
  <data name="MissingRequiredData" xml:space="preserve">
    <value>A mandatory write schema item is missing.</value>
    <comment>-484</comment>
  </data>
  <data name="ApiVersionNotMatch" xml:space="preserve">
    <value>The capClient apiVers value must match the API schema version.</value>
    <comment>-465</comment>
  </data>
  <data name="SchemaVersionNotMatch" xml:space="preserve">
    <value>For the capClient object, the values of schemaVersion must match the version attribute used in the plural data-objects.</value>
    <comment>-473</comment>
  </data>
  <data name="RecurringItemsEmptySelection" xml:space="preserve">
    <value>When multiple selection criteria is are included in a recurring pattern, an empty value must not be specified.</value>
    <comment>-439</comment>
  </data>
  <data name="RecurringItemsInconsistentSelection" xml:space="preserve">
    <value>When multiple selection criteria is are included in a recurring element, the same selection items must exist in each recurring node.</value>
    <comment>-438</comment>
  </data>
  <data name="QueryNotSupported" xml:space="preserve">
    <value>Query not supported.</value>
    <comment>-470</comment>
  </data>
  <data name="QueryTemplateNonConforming" xml:space="preserve">
    <value>The query template is does not conform to the data schema for this data-object.</value>
    <comment>-469</comment>
  </data>
  <data name="UpdateTemplateNonConforming" xml:space="preserve">
    <value>The XMLin document does not comply with the update schema.</value>
    <comment>-483</comment>
  </data>
  <data name="InvalidMinimumQueryTemplate" xml:space="preserve">
    <value>If the OptionsIn keyword ‘requestObjectSelectionCapability’ is specified with a value other than ‘none’ then QueryIn must be the Minimum Query Template</value>
    <comment>-428</comment>
  </data>
  <data name="InvalidOptionForChangeLogOnly" xml:space="preserve">
    <value>OptionsIn keyword returnsElements=latest-change-only can only be used for a changeLog object.</value>
    <comment>-476</comment>
  </data>
  <data name="InvalidOptionForGrowingObjectOnly" xml:space="preserve">
    <value>The OptionsIn keyword ‘returnElements’ must not specify a value of “headeronly” or “data-only” for a non-growing data-object.</value>
    <comment>-425</comment>
  </data>
  <data name="InvalidOptionsInCombination" xml:space="preserve">
    <value>The OptionsIn keyword ‘requestObjectSelectionCapability’ with a value other than ‘none’ must not be specified with any other OptionsIn keyword.</value>
    <comment>-427</comment>
  </data>
  <data name="ChildUidNotUnique" xml:space="preserve">
    <value>Each lower level child uid value must be unique within the context of its nearest recurring parent node.</value>
    <comment>-464</comment>
  </data>
  <data name="InputDataObjectNotCompliant" xml:space="preserve">
    <value>The result of an add, update, or delete operation must be compliant with the derived write schema after performing a retrieval of the complete data-object</value>
    <comment>-412</comment>
  </data>
  <data name="InvalidUnitOfMeasure" xml:space="preserve">
    <value>The value of the uom attribute is must match an ‘annotation’ attribute from the WITSML Units Dictionary XML file.</value>
    <comment>-443</comment>
  </data>
  <data name="BadColumnIdentifier" xml:space="preserve">
    <value>For systematically growing data-objects, the column-identifier (mnemonic) values must not contain one of the following special characters: single-quote, double-quote, less than, greater than, forward slash, backward slash, ampersand, comma.</value>
    <comment>-459</comment>
  </data>
  <data name="MixedStructuralRangeIndices" xml:space="preserve">
    <value>For growing data-objects, a combination of depth and date-time structural-range indices must not be specified.</value>
    <comment>-458</comment>
  </data>
  <data name="IndexNotFirstInDataColumnList" xml:space="preserve">
    <value>If a column-identifier representing the index column is specified then it must be specified first in the data-column-list.</value>
    <comment>-457</comment>
  </data>
</root>