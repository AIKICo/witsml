//----------------------------------------------------------------------- 
// PDS WITSMLstudio Core, 2017.1
//
// Copyright 2017 Petrotechnical Data Systems
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------

// ----------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------
using System.Xml.Linq;
using PDS.WITSMLstudio.Data;
using WITSML141 = Energistics.DataAccess.WITSML141;
using WITSML131 = Energistics.DataAccess.WITSML131;

namespace PDS.WITSMLstudio.Query
{
    /// <summary>
    /// Provides helper methods to create query templates for WITSML data objects.
    /// </summary>
    public static partial class QueryTemplates
    {
        private static readonly DataObjectTemplate _template = new DataObjectTemplate();        

        /// <summary>
        /// Gets the template for Witsml object.
        /// </summary>
        /// <param name="version">The version.</param>
        /// <param name="objectType">Type of the object.</param>
        /// <param name="returnElementsOptionIn">The return elements option in.</param>
        /// <returns>The XDocument.</returns>
        public static XDocument GetTemplate(string objectType, string version, OptionsIn.ReturnElements returnElementsOptionIn)
        {

            if (OptionsIn.DataVersion.Version131.Equals(version))
            {
                return GetTemplateForWitsml131(objectType, returnElementsOptionIn);
            }

            if (OptionsIn.DataVersion.Version141.Equals(version))
            {
                return GetTemplateForWitsml141(objectType, returnElementsOptionIn);
            }

            return new XDocument();
        }

        /// <summary>
        /// Gets the template for Witsml131 objects.
        /// </summary>
        /// <param name="objectType">The object type.</param>
        /// <param name="returnElementsOptionIn">The returnElement optionsIn.</param>
        /// <returns>The XDocument.</returns>
        public static XDocument GetTemplateForWitsml131(string objectType, OptionsIn.ReturnElements returnElementsOptionIn)
        {
            var xDocument = new XDocument();

            switch (objectType)
            {

                case "log":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Log.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Log.IdOnly;

                    if (OptionsIn.ReturnElements.HeaderOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Log.HeaderOnly;
                    else if (OptionsIn.ReturnElements.DataOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Log.DataOnly;

                    break;

                case "message":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Message.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Message.IdOnly;

                    break;

                case "rig":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Rig.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Rig.IdOnly;

                    break;

                case "trajectory":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Trajectory.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Trajectory.IdOnly;

                    if (OptionsIn.ReturnElements.HeaderOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Trajectory.HeaderOnly;
                    else if (OptionsIn.ReturnElements.DataOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Trajectory.DataOnly;

                    break;

                case "wbGeometry":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.WbGeometry.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.WbGeometry.IdOnly;

                    break;

                case "well":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Well.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Well.IdOnly;

                    break;

                case "wellbore":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Wellbore.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml131.Wellbore.IdOnly;

                    break;

            }

            return xDocument;
        }

        /// <summary>
        /// Gets the template for Witsml141 objects.
        /// </summary>
        /// <param name="objectType">The object type.</param>
        /// <param name="returnElementsOptionIn">The returnElement optionsIn.</param>
        /// <returns>The XDocument.</returns>
        public static XDocument GetTemplateForWitsml141(string objectType, OptionsIn.ReturnElements returnElementsOptionIn)
        {
            var xDocument = new XDocument();

            switch (objectType)
            {

                case "attachment":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Attachment.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Attachment.IdOnly;

                    break;

                case "log":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Log.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Log.IdOnly;

                    if (OptionsIn.ReturnElements.HeaderOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Log.HeaderOnly;
                    else if (OptionsIn.ReturnElements.DataOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Log.DataOnly;

                    break;

                case "message":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Message.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Message.IdOnly;

                    break;

                case "rig":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Rig.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Rig.IdOnly;

                    break;

                case "trajectory":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Trajectory.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Trajectory.IdOnly;

                    if (OptionsIn.ReturnElements.HeaderOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Trajectory.HeaderOnly;
                    else if (OptionsIn.ReturnElements.DataOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Trajectory.DataOnly;

                    break;

                case "wbGeometry":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.WbGeometry.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.WbGeometry.IdOnly;

                    break;

                case "well":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Well.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Well.IdOnly;

                    break;

                case "wellbore":
                    if (OptionsIn.ReturnElements.All.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Wellbore.All;
                    else if (OptionsIn.ReturnElements.IdOnly.Equals(returnElementsOptionIn.Value))
                        xDocument = Witsml141.Wellbore.IdOnly;

                    break;

            }

            return xDocument;
        }

        /// <summary>
        /// Provides helper methods to create Witsml131 query templates.
        /// </summary>
        public static class Witsml131
        {          

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for log.    
            /// </summary>          
            public static class Log
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                private static XDocument _headerOnly;
                private static XDocument _dataOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.LogList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.LogList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

                /// <summary>
                /// Create a header only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument HeaderOnly
                {
                    get
                    {

                        if (_headerOnly != null) return Clone(_headerOnly);
                        _headerOnly = _template.Create<WITSML131.LogList>();
                        _template.Remove(_headerOnly, "//logData");
                        return Clone(_headerOnly);
                    }
                }

                /// <summary>
                ///  Create a data only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument DataOnly
                {
                    get
                    {

                        if (_dataOnly != null) return Clone(_dataOnly);
                        _dataOnly = _template.Create<WITSML131.LogList>();
                        _template.RemoveAll(_dataOnly, "/*/*/*[name()!='logData']");
                        return Clone(_dataOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for message.    
            /// </summary>          
            public static class Message
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.MessageList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.MessageList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for rig.    
            /// </summary>          
            public static class Rig
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.RigList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.RigList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for trajectory.    
            /// </summary>          
            public static class Trajectory
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                private static XDocument _headerOnly;
                private static XDocument _dataOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.TrajectoryList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.TrajectoryList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

                /// <summary>
                /// Create a header only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument HeaderOnly
                {
                    get
                    {

                        if (_headerOnly != null) return Clone(_headerOnly);
                        _headerOnly = _template.Create<WITSML131.TrajectoryList>();
                        _template.Remove(_headerOnly, "//trajectoryStation");
                        return Clone(_headerOnly);
                    }
                }

                /// <summary>
                ///  Create a data only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument DataOnly
                {
                    get
                    {

                        if (_dataOnly != null) return Clone(_dataOnly);
                        _dataOnly = _template.Create<WITSML131.TrajectoryList>();
                        _template.RemoveAll(_dataOnly, "/*/*/*[name()!='trajectoryStation']");
                        return Clone(_dataOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for wbGeometry.    
            /// </summary>          
            public static class WbGeometry
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.WellboreGeometryList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.WellboreGeometryList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for well.    
            /// </summary>          
            public static class Well
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.WellList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.WellList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' ]");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml131 query templates for wellbore.    
            /// </summary>          
            public static class Wellbore
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML131.WellboreList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML131.WellboreList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell']");
                        return Clone(_idOnly);
                    }
                }

            }

        }

        /// <summary>
        /// Provides helper methods to create Witsml141 query templates.
        /// </summary>
        public static class Witsml141
        {          

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for attachment.    
            /// </summary>          
            public static class Attachment
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.AttachmentList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.AttachmentList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for log.    
            /// </summary>          
            public static class Log
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                private static XDocument _headerOnly;
                private static XDocument _dataOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.LogList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.LogList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

                /// <summary>
                /// Create a header only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument HeaderOnly
                {
                    get
                    {

                        if (_headerOnly != null) return Clone(_headerOnly);
                        _headerOnly = _template.Create<WITSML141.LogList>();
                        _template.Remove(_headerOnly, "//logData");
                        return Clone(_headerOnly);
                    }
                }

                /// <summary>
                ///  Create a data only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument DataOnly
                {
                    get
                    {

                        if (_dataOnly != null) return Clone(_dataOnly);
                        _dataOnly = _template.Create<WITSML141.LogList>();
                        _template.RemoveAll(_dataOnly, "/*/*/*[name()!='logData']");
                        return Clone(_dataOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for message.    
            /// </summary>          
            public static class Message
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.MessageList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.MessageList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for rig.    
            /// </summary>          
            public static class Rig
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.RigList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.RigList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for trajectory.    
            /// </summary>          
            public static class Trajectory
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                private static XDocument _headerOnly;
                private static XDocument _dataOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.TrajectoryList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.TrajectoryList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

                /// <summary>
                /// Create a header only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument HeaderOnly
                {
                    get
                    {

                        if (_headerOnly != null) return Clone(_headerOnly);
                        _headerOnly = _template.Create<WITSML141.TrajectoryList>();
                        _template.Remove(_headerOnly, "//trajectoryStation");
                        return Clone(_headerOnly);
                    }
                }

                /// <summary>
                ///  Create a data only query template.
                /// </summary>
                /// <returns></returns>
                public static XDocument DataOnly
                {
                    get
                    {

                        if (_dataOnly != null) return Clone(_dataOnly);
                        _dataOnly = _template.Create<WITSML141.TrajectoryList>();
                        _template.RemoveAll(_dataOnly, "/*/*/*[name()!='trajectoryStation']");
                        return Clone(_dataOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for wbGeometry.    
            /// </summary>          
            public static class WbGeometry
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.WellboreGeometryList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.WellboreGeometryList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell' and name() != 'nameWellbore']");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for well.    
            /// </summary>          
            public static class Well
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.WellList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.WellList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' ]");
                        return Clone(_idOnly);
                    }
                }

            }

            /// <summary>
            /// Provides helper methods to create Witsml141 query templates for wellbore.    
            /// </summary>          
            public static class Wellbore
            { 
                private static XDocument _all;
                private static XDocument _idOnly;

                /// <summary>
                /// Gets an all query template
                /// </summary>
                public static XDocument All
                {
                    get
                    {
                        if (_all != null) return Clone(_all);
                        _all = _template.Create<WITSML141.WellboreList>();
                        return Clone(_all);
                    }
                }

                /// <summary>
                /// Gets an id-only query template.
                /// </summary>
                public static XDocument IdOnly
                {
                    get
                    {

                        if (_idOnly != null) return Clone(_idOnly);
                        _idOnly = _template.Create<WITSML141.WellboreList>();
                        _template.RemoveAll(_idOnly, "/*/*/*[name() != 'name' and name() != 'nameWell']");
                        return Clone(_idOnly);
                    }
                }

            }

        }

        private static XDocument Clone(XDocument document) => new XDocument(document);
    }
}